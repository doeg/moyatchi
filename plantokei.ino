#define sclk 13
#define mosi 11
#define cs   10
#define dc   9
#define rst  8  // you can also connect this to the Arduino reset
#define photocell 0

#define piezo 2

#include <MemoryFree.h>
#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library
#include <SPI.h>
#include <Plantokei_Music.h>


void setup();
void loop();
int getLightLevel();
void initSuns();
void printLumens(int lightLevel);
void printSun(int i, bool fill);
void playTone();
void playSong();
void printSprite();
void drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color, const uint8_t *lastFrame);

int NUM_FRAMES = 2;
int SPRITE_SIZE = 64; // in pixels
const unsigned char sprites[2][2048] PROGMEM = {
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00,
0x00, 0x00, 0x00, 0x03, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0f, 0xf0, 0x00,
0x00, 0x00, 0x00, 0x0c, 0x30, 0x33, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x30, 0x33, 0xf0, 0x00,
0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0xf0, 0x00,
0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x30, 0x00,
0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0x30, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0x30, 0x00,
0x00, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x30, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x30, 0x00,
0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x30, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x30, 0x00,
0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x30, 0x00,
0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0c, 0x00,
0x03, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0c, 0x00, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0c, 0x00,
0x00, 0xc0, 0xc0, 0x0c, 0x00, 0x00, 0x0c, 0x00, 0x00, 0xc0, 0xc0, 0x0c, 0x00, 0x00, 0x0c, 0x00,
0x03, 0x0c, 0x30, 0x03, 0x00, 0x00, 0x30, 0x00, 0x03, 0x0c, 0x30, 0x03, 0x00, 0x00, 0x30, 0x00,
0x00, 0x3c, 0xc0, 0x00, 0xc0, 0x00, 0xcf, 0x00, 0x00, 0x3c, 0xc0, 0x00, 0xc0, 0x00, 0xcf, 0x00,
0x00, 0xcf, 0x00, 0x0f, 0x3f, 0xff, 0x03, 0x00, 0x00, 0xcf, 0x00, 0x0f, 0x3f, 0xff, 0x03, 0x00,
0x03, 0x3f, 0xc0, 0x30, 0x00, 0x00, 0x0c, 0x00, 0x03, 0x3f, 0xc0, 0x30, 0x00, 0x00, 0x0c, 0x00,
0x03, 0xff, 0xc0, 0xfc, 0x00, 0x00, 0x3f, 0x00, 0x03, 0xff, 0xc0, 0xfc, 0x00, 0x00, 0x3f, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

},

{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00,
0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0xf0, 0x00,
0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0xf0, 0x00,
0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xf0, 0x00,
0x00, 0x00, 0x00, 0xc0, 0x00, 0xc0, 0x30, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0xc0, 0x30, 0x00,
0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x30, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x30, 0x00,
0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x30, 0x00,
0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0x00,
0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00,
0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00,
0x00, 0xc0, 0x00, 0x30, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0x30, 0x00, 0x00, 0xc0, 0x00,
0x03, 0x00, 0x30, 0x30, 0x00, 0x00, 0xc0, 0x00, 0x03, 0x00, 0x30, 0x30, 0x00, 0x00, 0xc0, 0x00,
0x00, 0xcc, 0xc0, 0x0c, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xcc, 0xc0, 0x0c, 0x00, 0x00, 0xc0, 0x00,
0x00, 0x3c, 0x30, 0xf3, 0x00, 0x03, 0x00, 0x00, 0x00, 0x3c, 0x30, 0xf3, 0x00, 0x03, 0x00, 0x00,
0x00, 0xcf, 0x00, 0xc0, 0xff, 0xfc, 0xf0, 0x00, 0x00, 0xcf, 0x00, 0xc0, 0xff, 0xfc, 0xf0, 0x00,
0x03, 0x3f, 0xc0, 0x30, 0x00, 0x00, 0x0c, 0x00, 0x03, 0x3f, 0xc0, 0x30, 0x00, 0x00, 0x0c, 0x00,
0x03, 0xff, 0xc0, 0xfc, 0x00, 0x00, 0x3f, 0x00, 0x03, 0xff, 0xc0, 0xfc, 0x00, 0x00, 0x3f, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

}
};

uint16_t SPRITE_X = 25;
uint16_t SPRITE_Y = 25;

// Use low-speed display
// Adafruit_ST7735 tft = Adafruit_ST7735(cs, dc, mosi, sclk, rst);

// Use high-speed display
Adafruit_ST7735 tft = Adafruit_ST7735(cs, dc, rst);



// faster drawPixel method by inlining calls and using setAddrWindow and pushColor
// using macro to force inlining
#define drawPixel(a, b, c) tft.setAddrWindow(a, b, a, b); tft.pushColor(c)


float p = 3.1415926;

bool SUN_FILLS[] = {false, false, false, false, false};

int SUN_RADIUS = 5;
int SUN_PADDING = 2;

int LINE_HEIGHT = 10; // pixels

int LINE_SUNS = 150;

int melody[] = { c, e, g, C };
int beats[] = { 8, 4, 4, 8 };

int MAX_COUNT = sizeof(melody) / 2; // Melody length, for looping.

int tone_ = 0;
int beat = 0;
long duration  = 0;
long tempo = 10000;
// Set length of pause between notes
int pause = 1000;
// Loop variable to increase Rest length
int rest_count = 100; //<-BLETCHEROUS HACK; See NOTES

void setup() {
  Serial.begin(9600);
  Serial.println("hello!");

  tft.initR(INITR_BLACKTAB);
  tft.fillScreen(ST7735_BLACK);
  initSuns();

  pinMode(piezo, OUTPUT);
  playSong();
  tft.drawBitmap(SPRITE_X, SPRITE_Y, sprites[0], SPRITE_SIZE, SPRITE_SIZE, ST7735_YELLOW, ST7735_BLACK);
}

unsigned long frames = 0;

void loop() {
  frames += 1L;

  printSprite();
  delay(500);

  int lightLevel = getLightLevel();
  printLumens(lightLevel);
}

int getLightLevel() {
  float photocellReading = (float) analogRead(photocell);
  int lightLevel = floor((photocellReading / 1023) * 5);
  return lightLevel;
}

void initSuns() {
  for (int i = 1; i <= 5; i++) {
    printSun(i, false);
  }
}

void printLumens(int lightLevel) {
  for (int i = 1; i <= 5; i++) {
    bool hasFill = i <= lightLevel;
    bool hadFill = SUN_FILLS[i-1];

    if(hasFill != hadFill) {
      printSun(i, hasFill);
    }

    SUN_FILLS[i-1] = hasFill;
  }
}

void printSun(int i, bool fill) {
  int j = i - 1;
  int outlineX = 28 + (j * SUN_RADIUS * 2) + SUN_RADIUS + (j * SUN_PADDING);

  tft.fillCircle(outlineX, LINE_SUNS, SUN_RADIUS, fill ? ST7735_YELLOW : ST7735_BLACK);
  tft.drawCircle(outlineX, LINE_SUNS, SUN_RADIUS, ST7735_YELLOW);
}

void printSprite() {
  // Mod the frame by the number of sprites in the animation to get the indices
  // of the frames. (We need the last frame to be able to get the diff.)
  int lastIndex = (frames - 1) % NUM_FRAMES;
  int nextIndex = frames % NUM_FRAMES;

  tft.setCursor(0, 0);
  tft.setTextColor(ST7735_YELLOW, ST7735_BLACK);
  tft.print(frames);
  tft.print(" ");
  tft.print(nextIndex);

  drawBitmap(SPRITE_X, SPRITE_Y, sprites[nextIndex], SPRITE_SIZE, SPRITE_SIZE, ST7735_YELLOW, sprites[lastIndex]);
}

// foreground color (unset bits are transparent).
void drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color, const uint8_t *lastFrame) {

  int16_t i, j, byteWidth = (w + 7) / 8;
  uint8_t currentByte, lastByte, maskByte;

  for(j=0; j<h; j++) {
    for(i=0; i<w; i++) {
      int16_t offset = j * byteWidth + i / 8;

      if(i & 7) {
        currentByte <<= 1;
        lastByte <<= 1;
      }

      else {
        currentByte = pgm_read_byte(bitmap + offset);
        lastByte = pgm_read_byte(lastFrame + offset);
      }

      maskByte = currentByte ^ lastByte;

      if (maskByte) {
          drawPixel(x+i, y+j, ST7735_BLACK);

        if (currentByte & 0x80) {
            drawPixel(x+i, y+j, color);
        }
      }
    }
  }
}

void playSong() {
  // Set up a counter to pull from melody[] and beats[]
  for (int i=0; i<MAX_COUNT; i++) {
    tone_ = melody[i];
    beat = beats[i];

    duration = beat * tempo; // Set up timing

    playTone();
    // A pause between notes...
    delayMicroseconds(pause);
  }
}

void playTone() {
  long elapsed_time = 0;
  if (tone_ > 0) { // if this isn't a Rest beat, while the tone has
    //  played less long than 'duration', pulse speaker HIGH and LOW
    while (elapsed_time < duration) {

      digitalWrite(piezo,HIGH);
      delayMicroseconds(tone_ / 2);

      // DOWN
      digitalWrite(piezo, LOW);
      delayMicroseconds(tone_ / 2);

      // Keep track of how long we pulsed
      elapsed_time += (tone_);
    }
  }
  else { // Rest beat; loop times delay
    for (int j = 0; j < rest_count; j++) { // See NOTE on rest_count
      delayMicroseconds(duration);
    }
  }
}
